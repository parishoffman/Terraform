- name: EC2 Instance Management
  hosts: aws_ubuntu:aws_amazon
  become: true
  gather_facts: true
  vars:
    ansible_python_interpreter: "/usr/bin/python3.11"
    ansible_user: ubuntu
  
  tasks:
    - name: Update apt cache (Ubuntu)
      shell: apt update
      when: ansible_os_family == "Debian"
    
  #  - name: Upgrade packages (Ubuntu)
  #    shell: apt upgrade    
  #    when: ansible_os_family == "Debian"
    
    - name: Update yum cache (Amazon Linux)
      yum:
        update_cache: yes
      when: ansible_os_family == "RedHat"
    
    - name: Upgrade packages (Amazon Linux)
      yum:
        name: '*'
        state: latest
      when: ansible_os_family == "RedHat"

    - name: Install curl
      shell: apt install -y apt-transport-https ca-certificates curl software-properties-common
      when: ansible_os_family == "Debian"

    - name: Add Docker GPG key (Ubuntu)
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor --yes -o /usr/share/keyrings/docker-archive-keyring.gpg
      when: ansible_os_family == "Debian"

    - name: Add Docker repository (Ubuntu)
      shell: echo "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      when: ansible_os_family == "Debian"
    
    - name: Update
      shell: apt update -y
      when: ansible_os_family == "Debian"

    - name: Install Docker (Ubuntu)
      shell: apt install -y docker-ce
      when: ansible_os_family == "Debian"   
   
    - name: Install Docker (Amazon Linux)
      yum:
        name: docker
        state: latest
      when: ansible_os_family == "RedHat"
    
    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes
    
    - name: Get Docker version
      command: docker --version
      register: docker_version
      changed_when: false
    
    - name: Print Docker version
      debug:
        msg: "Docker version: {{ docker_version.stdout }}"
    
    - name: Get disk usage information
      command: df -h
      register: disk_usage
      changed_when: false
    
    - name: Print disk usage
      debug:
        msg: "Disk usage for {{ inventory_hostname }}:\n{{ disk_usage.stdout }}"
    
    - name: Create disk usage report
      local_action:
        module: copy
        content: "Disk usage for {{ inventory_hostname }}:\n{{ disk_usage.stdout }}\n\n"
        dest: "./disk_usage_reports/{{ inventory_hostname }}.txt"
      become: false